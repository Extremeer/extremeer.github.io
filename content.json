{"meta":{"title":"Extremeer 极振科技传媒工作室","subtitle":"","description":"","author":"John Doe","url":"https://extremeer.github.io","root":"/"},"pages":[{"title":"","date":"2022-05-07T11:19:20.928Z","updated":"2022-05-07T11:19:20.928Z","comments":true,"path":"404.html","permalink":"https://extremeer.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 您可以在底部评论区查看部分页面的更改历史"},{"title":"","date":"2022-04-26T09:37:56.279Z","updated":"2022-04-26T09:37:56.279Z","comments":true,"path":"about/index.html","permalink":"https://extremeer.github.io/about/index.html","excerpt":"","text":"关于 极振科技传媒工作室极振科技传媒工作室成立于2015年12月2日。让具有一定专业知识、专业技术和创新能力的优秀人才汇集在一起，以科技创作与传媒文化为重点，抓住“创新”这一主题，汇集团队智慧，普及先进的创新理念、技术、方法，带动专业技术人员提高技能素质，将成员知识转化为能力，能力转化为成果，成果转化为效益。"},{"title":"","date":"2022-05-07T11:01:56.810Z","updated":"2022-05-07T11:01:56.810Z","comments":true,"path":"friends/index.html","permalink":"https://extremeer.github.io/friends/index.html","excerpt":"合作伙伴 极振科技传媒工作室拥有许多伙伴，他们有的是工作室的成员，有的是一直以来的合作朋友，在和他们的合作过程中工作室获得了许多的经验，也正因有了他们的帮助，工作室才能发展至今。","text":"合作伙伴 极振科技传媒工作室拥有许多伙伴，他们有的是工作室的成员，有的是一直以来的合作朋友，在和他们的合作过程中工作室获得了许多的经验，也正因有了他们的帮助，工作室才能发展至今。 感谢你们的参与！"},{"title":"合集","date":"2022-04-23T14:27:36.949Z","updated":"2022-04-23T14:27:36.949Z","comments":true,"path":"categories/index.html","permalink":"https://extremeer.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-23T14:29:20.919Z","updated":"2022-04-23T14:29:20.919Z","comments":true,"path":"tech/index.html","permalink":"https://extremeer.github.io/tech/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-23T14:29:03.727Z","updated":"2022-04-23T14:29:03.727Z","comments":true,"path":"media/index.html","permalink":"https://extremeer.github.io/media/index.html","excerpt":"","text":""}],"posts":[{"title":"「iPod 改变世界」iPod停产｜iPod历史介绍","slug":"ipod_change_the_world","date":"2022-05-18T16:00:00.000Z","updated":"2022-05-20T11:23:18.009Z","comments":true,"path":"media/c553df46/","link":"","permalink":"https://extremeer.github.io/media/c553df46/","excerpt":"","text":"2022年5月10日，苹果发文宣布iPod touch 7停产，一代听歌神器虽然落幕，但其对未来却意义非凡。原视频存储于Bilibili. 2022-05-19","categories":[{"name":"传媒·数码","slug":"传媒·数码","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%B0%E7%A0%81/"}],"tags":[{"name":"视频","slug":"视频","permalink":"https://extremeer.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"数码","slug":"数码","permalink":"https://extremeer.github.io/tags/%E6%95%B0%E7%A0%81/"},{"name":"历史","slug":"历史","permalink":"https://extremeer.github.io/tags/%E5%8E%86%E5%8F%B2/"}],"author":"Extremeer"},{"title":"「剪辑教程」macOS环境下达芬奇Davinci 17常用快捷键","slug":"davinci_hot_key_mac","date":"2022-05-10T16:00:00.000Z","updated":"2022-05-18T15:40:20.898Z","comments":true,"path":"media/486edfec/","link":"","permalink":"https://extremeer.github.io/media/486edfec/","excerpt":"","text":"如果你是Windows用户，请往此：Windows环境下达芬奇Davinci 17常用快捷键 本文列举了在macOS下运用达芬奇Davinci Resolve 17剪辑的时候常用的一些快捷键，记住这些快捷键并常加使用会大大提高你的剪辑效率，帮助你更快速的完成你的工作。 1. 时间线回放① 设置出入点与插入素材 快捷键 对应操作 I 入点 O 出点 Option + I 清除入点 Option + O 清除出点 Option + X 清除入点和出点 F9 插入素材 ② 快退&#x2F;停止&#x2F;快进 快捷键 对应操作 J 快退 K 停止 L 快进 多次按 J 或 L 加速快退快进 按住 K 键再按 J 或 L 慢退和慢进 当处于加速快进快退时按 K 减速快进快退 ③ 跳转前&#x2F;后1个剪辑点 快捷键 对应操作 ↑ 跳转上一个剪辑点 ↓ 跳转下一个剪辑点 ④ 向前&#x2F;后跳1帧 快捷键 对应操作 ← 向前跳1帧 → 向后跳1帧 ⑤ 向前&#x2F;后跳1秒 快捷键 对应操作 Shift + ← 向前跳1秒 Shift + → 向后跳1秒 ⑥ 查找选中原素材 快捷键 对应操作 F 素材监视器中显示选中原素材 Option + F 媒体浏览器中显示选中原素材 ⑦ 选择素材 快捷键 对应操作 Command + A 全选素材 Command + Option + Y 向前全选素材 Option + Y 向后全选素材 ⑧ 全屏播放 快捷键 对应操作 P 或 Command + F 全屏播放 ⑨ 缩放时间线 快捷键 对应操作 Command + + 放大时间线 Command + - 缩小时间线 Shift + Z 总览时间线 ⑩ 锁定轨道 快捷键 对应操作 Option + Shift + 1 &#x2F; 2 &#x2F; 3 锁定视频轨道1 &#x2F; 轨道2 &#x2F; 轨道3 Option + Shift + F1 &#x2F; F2 &#x2F; F3 锁定音频轨道1 &#x2F; 轨道2 &#x2F; 轨道3 2. 片段编辑① 添加剪辑点（分割片段） 快捷键 对应操作 Command + \\ 快速添加剪辑点 B 切刀 ② 选中片段 快捷键 对应操作 Shift + V 选中片段 ③ 修剪素材 快捷键 对应操作 Shift + [ 向前修剪素材 Shift + ] 向后修剪素材 Command + Shift + [ 向前波纹修剪素材（留下一段空隙） Command + Shift + ] 向后波纹修剪素材（下一段片段自动前移） ④ 删除素材 快捷键 对应操作 Backspace 删除素材（留下一段空隙） Shift + Backspace 波纹删除（下一段片段自动前移） ⑤ 移动轨道 快捷键 对应操作 Option + ↑ 上移一个轨道 Option + ↓ 下移一个轨道 ⑥ 添加转场 快捷键 对应操作 Command + T 快速为音视频都添加转场 Shift + T 快速为音频单独添加转场 Option + T 快速为视频单独添加转场 ⑦ 复制和粘贴 快捷键 对应操作 Command + C 复制片段或片段属性 Command + V 粘贴片段 Option + V 粘贴片段属性 ⑧ 关闭&#x2F;启用片段 快捷键 对应操作 D 关闭&#x2F;启用片段 ⑨ 变速控制 快捷键 对应操作 Command + R 变速控制 ⑩ 曲线编辑 快捷键 对应操作 Shift + C 曲线编辑 ⑪ 关键帧编辑 快捷键 对应操作 Command + Shift + C 显示片段帧控制器 ⑫ 链接片段 快捷键 对应操作 Command + Option + L 链接选中片段 Command + Shift + L 开关素材导入自动链接","categories":[{"name":"传媒·教程","slug":"传媒·教程","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"达芬奇","slug":"达芬奇","permalink":"https://extremeer.github.io/tags/%E8%BE%BE%E8%8A%AC%E5%A5%87/"},{"name":"Davinci","slug":"Davinci","permalink":"https://extremeer.github.io/tags/Davinci/"},{"name":"剪辑","slug":"剪辑","permalink":"https://extremeer.github.io/tags/%E5%89%AA%E8%BE%91/"}],"author":"Extremeer"},{"title":"「剪辑教程」Windows环境下达芬奇Davinci 17常用快捷键","slug":"davinci_hot_key_win","date":"2022-05-07T16:00:00.000Z","updated":"2022-05-18T15:40:34.240Z","comments":true,"path":"media/9f95c718/","link":"","permalink":"https://extremeer.github.io/media/9f95c718/","excerpt":"","text":"如果你是macOS用户，请往此：macOS环境下达芬奇Davinci 17常用快捷键 本文列举了在Windows下运用达芬奇Davinci Resolve 17剪辑的时候常用的一些快捷键，记住这些快捷键并常加使用会大大提高你的剪辑效率，帮助你更快速的完成你的工作。 1. 时间线回放① 设置出入点与插入素材 快捷键 对应操作 I 入点 O 出点 Alt + I 清除入点 Alt + O 清除出点 Alt + X 清除入点和出点 F9 插入素材 ② 快退&#x2F;停止&#x2F;快进 快捷键 对应操作 J 快退 K 停止 L 快进 多次按 J 或 L 加速快退快进 按住 K 键再按 J 或 L 慢退和慢进 当处于加速快进快退时按 K 减速快进快退 ③ 跳转前&#x2F;后1个剪辑点 快捷键 对应操作 ↑ 跳转上一个剪辑点 ↓ 跳转下一个剪辑点 ④ 向前&#x2F;后跳1帧 快捷键 对应操作 ← 向前跳1帧 → 向后跳1帧 ⑤ 向前&#x2F;后跳1秒 快捷键 对应操作 Shift + ← 向前跳1秒 Shift + → 向后跳1秒 ⑥ 查找选中原素材 快捷键 对应操作 F 素材监视器中显示选中原素材 Alt + F 媒体浏览器中显示选中原素材 ⑦ 选择素材 快捷键 对应操作 Ctrl + A 全选素材 Ctrl + Alt + Y 向前全选素材 Alt + Y 向后全选素材 ⑧ 全屏播放 快捷键 对应操作 P 或 Ctrl + F 全屏播放 ⑨ 缩放时间线 快捷键 对应操作 Ctrl + + 放大时间线 Ctrl + - 缩小时间线 Shift + Z 总览时间线 ⑩ 锁定轨道 快捷键 对应操作 Alt + Shift + 1 &#x2F; 2 &#x2F; 3 锁定视频轨道1 &#x2F; 轨道2 &#x2F; 轨道3 Alt + Shift + F1 &#x2F; F2 &#x2F; F3 锁定音频轨道1 &#x2F; 轨道2 &#x2F; 轨道3 2. 片段编辑① 添加剪辑点（分割片段） 快捷键 对应操作 Ctrl + \\ 快速添加剪辑点 B 切刀 ② 选中片段 快捷键 对应操作 Shift + V 选中片段 ③ 修剪素材 快捷键 对应操作 Shift + [ 向前修剪素材 Shift + ] 向后修剪素材 Ctrl + Shift + [ 向前波纹修剪素材（留下一段空隙） Ctrl + Shift + ] 向后波纹修剪素材（下一段片段自动前移） ④ 删除素材 快捷键 对应操作 Backspace 删除素材（留下一段空隙） Delete 波纹删除（下一段片段自动前移） ⑤ 移动轨道 快捷键 对应操作 Alt + ↑ 上移一个轨道 Alt + ↓ 下移一个轨道 ⑥ 添加转场 快捷键 对应操作 Ctrl + T 快速为音视频都添加转场 Shift + T 快速为音频单独添加转场 Alt + T 快速为视频单独添加转场 ⑦ 复制和粘贴 快捷键 对应操作 Ctrl + C 复制片段或片段属性 Ctrl + V 粘贴片段 Alt + V 粘贴片段属性 ⑧ 关闭&#x2F;启用片段 快捷键 对应操作 D 关闭&#x2F;启用片段 ⑨ 变速控制 快捷键 对应操作 Ctrl + R 变速控制 ⑩ 曲线编辑 快捷键 对应操作 Shift + C 曲线编辑 ⑪ 关键帧编辑 快捷键 对应操作 Ctrl + Shift + C 显示片段帧控制器 ⑫ 链接片段 快捷键 对应操作 Ctrl + Alt + L 链接选中片段 Ctrl + Shift + L 开关素材导入自动链接","categories":[{"name":"传媒·教程","slug":"传媒·教程","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"达芬奇","slug":"达芬奇","permalink":"https://extremeer.github.io/tags/%E8%BE%BE%E8%8A%AC%E5%A5%87/"},{"name":"Davinci","slug":"Davinci","permalink":"https://extremeer.github.io/tags/Davinci/"},{"name":"剪辑","slug":"剪辑","permalink":"https://extremeer.github.io/tags/%E5%89%AA%E8%BE%91/"}],"author":"Extremeer"},{"title":"「数码技巧」Scrcpy实现手机电脑多屏协同","slug":"scrcpy_muti_monitor","date":"2022-05-06T16:00:00.000Z","updated":"2022-05-07T10:26:22.801Z","comments":true,"path":"tech/37374ace/","link":"","permalink":"https://extremeer.github.io/tech/37374ace/","excerpt":"","text":"转自极振科技工程师若然无亦 Roranrui博客：Scrcpy实现手机电脑多屏协同 多屏协同，是原一碰传功能的升级版本，一碰传重点在传输，而升级后的多屏协同，它不仅仅是平板&#x2F;电脑和手机之间文件互传，更是利用平板&#x2F;电脑的运算能力和专业系统能力，实现平板&#x2F;电脑和手机的无缝协同，键盘、鼠标成为手机的外设，在一个大屏设备上完成两个设备的任务，回微信、回邮件等，同时也利用平板&#x2F;电脑更专业的应用生态。 1. Scrcpy简介与配置简单地来说，scrcpy就是通过adb调试的方式来将手机屏幕投到电脑上，并可以通过电脑控制您的Android设备。它可以通过USB连接，也可以通过Wi-Fi连接（类似于隔空投屏），而且不需要任何root权限，不需要在手机里安装任何程序。scrcpy同时适用于GNU / Linux，Windows和macOS。 特性： 亮度（原生，仅显示设备屏幕） 性能（30~60fps） 质量（1920×1080或以上） 低延迟（35~70ms） 启动时间短（显示第一张图像约1秒） 非侵入性（设备上没有安装任何东西） 使用scrcpy的要求 Android设备至少需要API 21（Android 5.0以上版本）; 确保在您的设备上启用了adb调试 在某些设备上，您还需要启用其他选项以使用键盘和鼠标控制它。 adb的全称为Android Debug Bridge，就是起到调试桥的作用。通过adb我们可以在Eclipse中方便通过DDMS来调试Android程序，说白了就是debug工具。 —百度百科 注：如何开启adb调试以红米K40 MIUI版本13.0.2为例 ①进入开发者模式依次进入: 设置-&gt;我的设备-&gt;全部参数 点击MIUI版本多次，就可以开启开发者模式。 ②开启usb调试依次进入: 设置-&gt;更多设置-&gt;开发者选项 开启USB调试，USB调试(安全设置) 开发者选项中含有其他可能会影响系统运行的选项, 请勿随意开启任何功能。 下载与配置ScrcpyGithub地址：Genymobile&#x2F;scrcpy: Display and control your Android device 进入release发行 根据自己的需求下载对应版本的文件即可 解压的目录: 接下来需要将该目录加入系统环境变量 在Windows 10下, 依次进入: 设置-&gt;系统-&gt;关于 · · · 在系统变量处点击编辑 将解压目录的地址添加进去 就可以在cmd中直接操作了! win + R打开cmd输入adb version验证是否配置成功 2. 实现多屏协同方案一: 使用USB进行连接 手机通过USB连接到PC上，首次连接会弹出是否信任该电脑，点击始终信任即可。 命令行运行adb usb查看是否连接成功 1adb usb 同时手机会显示已连接到usb调试 第一次连接: 此时连接成功后, 直接运行scrcpy即可 方案二: 使用无线连接 此连接方式更加方便快捷，若宽带速率高，使用效果更佳，使用方法也非常简单。 为保证传输速率和质量, 建议使用手机连接电脑端热点 确保PC和手机在同一Wi-Fi中 手机先通过USB与PC相连 在PC上运行 adb tcpip 服务端口，如端口为5555 拔下你的设备，断开USB连接 在PC上运行 adb connect 手机IP:服务端口(手机IP可通过手机的状态信息, 或Wi-Fi网络详情查看)，或者登录路由器管理查看，一般以192.168开头） 运行scrcpy 即可实现无线同屏 注意事项投屏运行成功后, cmd窗口不可关闭, 因为此时该窗口相当于一个进程，如果关闭, 投屏也将关闭 3. 其他操作比特率修改无线投屏, 可能传输速率会导致性能变慢, 默认的scrcpy比特率是8Mbps，这对于Wi-Fi连接来说可能太多了。根据使用情况，降低比特率和分辨率可能是一个很好的折中方案。 123scrcpy --bit-rate 2M # 或者简写scrcpy -b2M -m800 降低分辨率有时候，可以通过降低镜像的分辨率来提高性能。 要同时限制宽度和高度到某个值 (例如 1024)： 12scrcpy --max-size 1024scrcpy -m 1024 # 简写 限制帧率要限制采集的帧率： 1scrcpy --max-fps 15 启动时关闭设备屏幕使用命令行选项在启动时镜像时可以关闭设备屏幕，这一点也挺实用： 12scrcpy --turn-screen-offscrcpy -S 标题窗口的标题默认为设备型号。可以通过如下命令修改： 1scrcpy --window-title &#x27;My device&#x27; 无边框禁用窗口边框： 1scrcpy --window-borderless 旋转可以通过以下命令旋转窗口： 1scrcpy --rotation 1 可选的值有： 0: 无旋转 1: 逆时针旋转 90° 2: 旋转 180° 3: 顺时针旋转 90° 也可以使用 Ctrl+← (左箭头) 和 Ctrl+→ (右箭头) 随时更改。 查看设备信息1adb devices 快捷键 操作 快捷键 切换全屏模式 Ctrl+f 向左旋转显示屏 Ctrl+← （左） 向右旋转显示屏 Ctrl+→ （右） 将窗口大小调整为 1：1（像素完美） Ctrl+g 调整窗口大小以删除黑色边框 Ctrl+w|双击¹ 点击HOME Ctrl+h|中键单击 点击BACK Ctrl+b|右键单击² 点击APP_SWITCH Ctrl+s|第四次点击³ 点击（解锁屏幕）⁴MENU Ctrl+m","categories":[{"name":"科技·实用","slug":"科技·实用","permalink":"https://extremeer.github.io/categories/%E7%A7%91%E6%8A%80%C2%B7%E5%AE%9E%E7%94%A8/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"手机","slug":"手机","permalink":"https://extremeer.github.io/tags/%E6%89%8B%E6%9C%BA/"},{"name":"协同","slug":"协同","permalink":"https://extremeer.github.io/tags/%E5%8D%8F%E5%90%8C/"}],"author":"Roranrui"},{"title":"「C++极简教程」第三章 C++函数和编译预处理","slug":"cpp_easy_section_3","date":"2022-05-05T16:00:00.000Z","updated":"2022-05-07T10:25:50.062Z","comments":true,"path":"tech/e6a42058/","link":"","permalink":"https://extremeer.github.io/tech/e6a42058/","excerpt":"","text":"本系列为C++的入门学习者服务，旨在于为此前毫无C++基础且未来要学习C++的学习者简单介绍关于C++语言最基础的部分知识，如果已入门C++，则不需要阅读本系列。 3.1 C++函数的定义 任何c++程序由至少一个函数组成，其中main函数是必不可少的。 函数除了是程序的基本组成部分之外，更重要的是可以完成特定的功能。 为了完成特定的功能，函数需要数据的输入（参数），并给出数据的结果（返回值）。 通过编写和调用函数可以简化程序逻辑，提高编码效率，也是团队合作必备的基础。 1. 系统函数与自定义函数 系统函数：不需要我们编写，由系统提供的函数，也称为库函数。如：sqrt()。 自定义函数：自己编写的函数。 使用系统函数可以提高编程效率，但并不能覆盖所有的需求。因此我们需要学习自己编写函数，也就是自定义函数。编写自定义函数是结构化程序设计的主要步骤。 2. 函数参数和返回值 参数：向被调函数输入的、被调函数运行时所需要的数据。 参数的注意事项 返回值：将函数运行的结果输出，返回给调用函数。 返回值的注意事项 例： sqrt()开平方根函数 使用该函数的时候，需要一个输入的值，并得到对应的输出。如：y=sqrt(x) 对于sqrt函数，需要一个类型为你double的参数（输入），并提供一个类型为double的返回值（输出）。 3. 自定义函数的步骤① 分析函数的参数（个数，类型） ② 分析函数的返回值（类型） ③ 实现从参数得到返回值的过程 例：编写一个自定义函数max。 函数功能：求两个整数当中较大的数。 函数逻辑：使用判断语句即可。 参数分析：需要两个参数，都是整数类型。 返回值分析：结果返回一个整数。 4. 自定义函数的语法格式12345返回值类型 函数名 ( 函数参数列表 ) //函数头&#123; //函数体 return 返回值;&#125; 函数参数：数量为任意个，如果为0可以省略。 返回值：数量只能为0个或1个，用关键词return实现，且代码运行时遇return自动结束该函数。如果没有返回值，函数名前的返回值类型用void表示。 例1：有参有返函数：编写一个自定义函数max求两数的较大数。 12345int max(int a , int b) //每一个参数独立，即不能写成int a, b&#123; int c = a &gt; b ? a : b; return c; //通过该语句返回结果&#125; 例2：无参无返函数：打印函数print。 123456void print (void) //参数的void可省略&#123; cout &lt;&lt; &quot;*********&quot; &lt;&lt; endl; cout &lt;&lt; &quot;*example*&quot; &lt;&lt; endl; cout &lt;&lt; &quot;*********&quot; &lt;&lt; endl;&#125; //本函数仅仅实现打印的功能，无数据处理 例3：有参有返函数：求最大公约数的函数gcd。 函数功能：求两个整数的最大公约数。 函数逻辑：使用递推法（欧几里得算法）或穷举法皆可。 参数分析：需要两个参数，都是整数类型。 返回值分析：结果返回一个整数。 穷举法： 1234567int gcd(int a, int b) //与上例相同&#123; int c = a &lt; b ? a : b; //二者中较小的数 while (a % c != 0 || b % c != 0) //尝试 --c; return c; //得到结果&#125; 递推法（欧几里得算法或辗转相除法）： 1234567891011int gcd(int a, int b) //注意分析返回和参数类型&#123; int c = a % b; //c是a除以b的余数 while(c != 0) //欧几里得算法递推求解 &#123; a = b; b = c; c = a % b; &#125; return b; //返回最后的结果&#125; 5.函数定义小结 分析清楚函数所需的参数和能提供的返回值至关重要。 在函数实现过程中需要的辅助变量，不能作为参数来使用，只能定义在函数的内部。 遇到return语句之后函数自动结束，因此一般将return语句放在函数的最后。","categories":[{"name":"科技·编程","slug":"科技·编程","permalink":"https://extremeer.github.io/categories/%E7%A7%91%E6%8A%80%C2%B7%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://extremeer.github.io/tags/C/"},{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"}],"author":"Marz"},{"title":"「影视干货」视频频闪的快速解决方案","slug":"frame_rate_and_strobe","date":"2022-05-03T16:00:00.000Z","updated":"2022-05-07T10:25:55.197Z","comments":true,"path":"media/ff2c776f/","link":"","permalink":"https://extremeer.github.io/media/ff2c776f/","excerpt":"","text":"在拍摄视频时，有时镜头前的灯光或屏幕录制下来后会有相应频闪，灯光忽明忽暗。频闪与帧率、快门速度、用电频率的关系息息相关。本文所指频闪只是由于交流电频率导致的频闪，LED与屏幕刷新率等频闪不在此考虑范畴内。 1. 小白方案对于不想深入了解的同学，可以直接套用下列方案来规避大部分频闪。 所在地区 设置帧率 快门速度（可选） 中国及欧亚的大多数地区 25fps；50fps 1&#x2F;50；1&#x2F;100 北美、日本、韩国等地区 30fps；60fps 1&#x2F;60；1&#x2F;120 2. 高阶方案① 用电频率 交流电频率和性质决定了灯光会一明一暗进行交变脉冲，Hz表示每秒交变几次。交流电频率50Hz，周期0.02s，在电流整流后电路将后半个周期电流反向，使灯光脉冲频率为100Hz，周期为0.01s。 不同地区的用电频率是不一样的，这也导致出现了不同的视频制式来适应不同的频率。 地区 用电频率 视频制式 常见帧率 欧洲和亚洲的大多数地区 50Hz PAL 25fps; 50fps 北美、日本、韩国等地区 60Hz NTSC 30fps; 60fps 在人眼前这种脉冲闪烁也许非常微小甚至完全无法感受到，但对于手机及相机来说有时设置不当这种脉冲就会十分明显。 ② 帧率（FPS） 帧率，用于测量显示帧数的量度。FPS（Frames Per Second）指每秒拍摄的帧数。一般说，帧率影响画面流畅度，帧率越大，画面越流畅；帧率越小，画面越有跳动感。 在规避频闪的方法中，匹配帧率通常是最简单的。 帧率方案：设置帧率，让光源闪烁频率被这个帧率整除。 例： 在中国PAL制式下拍摄视频，用电频率是50Hz，光闪烁频率为100Hz，则多数时候只需设置25或者50fps，就能在多数情况下避免频闪。 如果在如北美NTSC制式下拍摄视频，就相应选择30或者60fps。 原理： 当快门速度一定且与光闪烁频率无整除关系时： 帧率与光闪烁频率若有整除关系，每一帧的起始采样点就相同，那么在相同快门的情况下每一帧的亮度就相同。 红色面积的横轴代表快门速度，红色面积代表每一帧的进光量 数字位置代表每一帧的开始，两个数字的间隔代表每一帧 可以看到每一帧的亮度是相同的 反之，帧率与光闪烁频率若无整除关系，每一帧的起始采样点就不同，每一帧的亮度就不同而造成频闪。 红色面积的横轴代表快门速度，红色面积代表每一帧的进光量 数字位置代表每一帧的开始，两个数字的间隔代表每一帧 可以看到每一帧的亮度是不同的 ③ 快门速度（不推荐） 快门速度，指的是相机快门进行一次开启到闭合的时间。 快门方案：设置快门速度，让光源闪烁频率被这个快门速度整除。 例： 中国供电频率50Hz，光闪烁频率为100Hz，将快门速度设定为1/50或1/100即可解决。 这个选项通常不好确定。在调整快门速度的同时，也要避免慢速快门而导致运动模糊的产生。 原理： 当帧率一定且与光闪烁频率无整除关系时： 若快门速度与光闪烁频率有整除关系，那么每一帧曝光的时候进光量就会固定等于一周期的量从而稳定无频闪。 红色面积的横轴代表快门速度，红色面积代表每一帧的进光量 数字位置代表每一帧的开始，两个数字的间隔代表每一帧 可以看到每一帧的亮度是相同的 反之，若快门速度与光闪烁频率无整除关系，那么每一帧曝光的时候进光量就会受光闪烁的不同时刻影响导致每一帧亮度不同从而造成频闪。 红色面积的横轴代表快门速度，红色面积代表每一帧的进光量 数字位置代表每一帧的开始，两个数字的间隔代表每一帧 可以看到每一帧的亮度是不同的 ④ 帧率与快门速度的混合运用 通常，在中国使用PAL制（即fps调整到25或50），无论多少快门速度都不会产生频闪，因为相机的采样间隔是和灯光的周期是同步的。例如50帧的时候采样周期是20ms，是灯光周期10ms的整数倍，在每一个周期内，采样的起始点是一样的。所以无论多少快门速度，每一帧的亮度都是相同的。 而在中国使用NTSC制（即fps调整到30或60），假如视频帧率为60帧，意味着每次采样的时间点是在灯光周期中的不同地方，这时只有快门速度等于光闪频率的倍数的时候才不会有频闪。 实际上，以部分索尼相机为例，在人造光源下，相机快门速度最高到1/100，如果超过1/100，如1/2500，虽然也是50Hz的整数倍，但在NTSC制下，仍然会出现频闪，甚至1/150都会。 PAL制下也并不能为所欲为，过高的快门速度，画面上会出现不明显的明暗条带，从上至下规律移动，且随着快门升高，画面上会出现细小的横纹。 3. 插件方案如果素材已经拍摄，则可以使用相关插件进行后期补救。 如果使用Adobe Premiere Pro或Adobe After Effects，则可以使用插件DEFlicker进行消除（需要下载）。 如果使用达芬奇Davinci Resolve在版本14以上可以使用自带效果去闪烁来消除。 但请注意一切后期都不如前期做好准备。","categories":[{"name":"传媒·教程","slug":"传媒·教程","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"原理","slug":"原理","permalink":"https://extremeer.github.io/tags/%E5%8E%9F%E7%90%86/"}],"author":"Extremeer"},{"title":"「C++极简教程」第二章 C++控制结构","slug":"cpp_easy_section_2","date":"2022-04-26T16:00:00.000Z","updated":"2022-05-18T15:39:39.210Z","comments":true,"path":"tech/8879c4a6/","link":"","permalink":"https://extremeer.github.io/tech/8879c4a6/","excerpt":"","text":"本系列为C++的入门学习者服务，旨在于为此前毫无C++基础且未来要学习C++的学习者简单介绍关于C++语言最基础的部分知识，如果已入门C++，则不需要阅读本系列。 2.1 算法与流程图（不展开讲）2.2 C++中的语句语句是C++程序的最基本单位，以分号结束。 注：头文件包含属于编译预处理，不是C++语句。 12#include &lt;iostream&gt; //头文件包含不是语句int a; //是语句 1. 声明语句用来定义或声明变量和函数。 1int a, b; 2. 表达式语句完成计算和操作。 1c = a + b; 3. 控制语句用来完成对程序流程的控制。 如：if 语句、for 语句、while 语句等。 4. 函数调用语句用来完成函数的调用。 1strcpy(a, b); 5. 空语句单独分号构成的语句。 意义：用在无内容可写，却需要语句来进行填充的位置。常见于循环语句，注意和分号区分。 6. 复合语句由一对&#123;&#125;构成，用来包括多个语句。 形式：&#123;语句1; 语句2;&#125; 1234if(i &lt;= 100) //该段语句只是示例，无实际意义&#123; a = b + c;&#125; 意义：用在只需要一个语句，但单个语句无法满足需求。 注：在语法上复合语句认为是一条语句。 2.3 分支结构1. if语句(1) 单分支if语句12if(表达式) 语句; 解释：表达式一般为逻辑或关系表达式，如果结果为true，则运行语句。而如果表达式是其他类型，则自动转换，非0为true，0为false。 单分支if语句运行图示 (2) 双分支if语句1234if(表达式) 语句1;else 语句2; 解释：如果表达式结果为true，则运行语句1，反之运行语句2。 双分支if语句运行图示 例：闰年判断（4倍数一般是闰年，整百数必是400倍数才是闰年） 123456int year;cin &gt;&gt; year;if(year % 4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0) cout &lt;&lt; year &lt;&lt; “是闰年” &lt;&lt; endl;else cout &lt;&lt; year &lt;&lt; “不是闰年” &lt;&lt; endl; 注：if语句的嵌套if语句的分支语句可以是一个新的if语句，叫做if语句的嵌套。 借助if的嵌套可以实现多分支的判断功能。 A. 嵌套在else语句：阶梯式if语句 1234567if(表达式) 语句1;else if(表达式2) 语句2;else if……else 语句n; 解释：依次对各个表达式进行判断，如果有满足true的则执行对应语句，并终止整个语句。 （注意和hoi4伪语言区分开） 嵌套在else的if语句运行图示 B. 嵌套在if语句：在if分支语句中增加新的if语句（不推荐） C++规定了if和else的“就近配对”原则，即相距最近且还没有配对的一对if和else首先配对。 123456if(表达式1) if(表达式2) 语句1; else 语句2;//else将与第二个if匹配。 如果需要强行更改配对关系，则要将属于同一层的语句放在&#123;&#125;中。 12345678if(表达式1)&#123; if(表达式2) 语句1;&#125;else 语句2;//else将与第一个if匹配。 2. 条件运算符 ?:三目运算符?:可以简化if语句表达。 1表达式1 ? 表达式2 : 表达式3; 解释：判定表达式1，若成立则执行表达式2，不成立则执行表达式3。 注： 条件运算符中后两个表达式的类型和第一个表达式完全无关。 条件运算符等级仅高于赋值（15）。 条件运算符是右结合性，自右向左结合。 例：a ? b : c ? d : e 应该理解为 a ? b : (c ? d : e) 3. switch语句1234567switch(整型表达式)&#123;case 常量表达式1 :《语句序列1》《break;》// 《》是“可选”的意思……case 常量表达式n :《语句序列n》《break;》《default : 语句序列》&#125; 解释： 计算switch后的整型表达式值。 逐个匹配case后表达式的值，如果相等则执行对应的语句序列。 如果语句后有break则终止整个switch语句，否则继续执行后续语句序列且不再进行判断。 若所有case都无法匹配则执行default语句。 例：计算学生的成绩等级 123456789101112131415int score;cout &lt;&lt; &quot;请输入学生的成绩:&quot;; cin &gt;&gt; score;switch(score/10)&#123;case 10: case 9: cout &lt;&lt; &quot;该生成绩为A&quot; &lt;&lt; endl; break;case 8: cout &lt;&lt; &quot;该生成绩为B&quot; &lt;&lt; endl; break;case 7: cout &lt;&lt; &quot;该生成绩为C&quot; &lt;&lt; endl; break;case 6: cout &lt;&lt; &quot;该生成绩为D&quot; &lt;&lt; endl; break;default: cout &lt;&lt; &quot;该生成绩为E&quot; &lt;&lt; endl; &#125; 注： switch语句只能对整数和字符类型使用。 只能判断表达式是否相等，不能判定不等大于小于。 case后的表达式只能是常量表达式。 break语句的使用请务必注意。 2.4 循环结构1. while语句12while(表达式) 循环体语句; 解释：如果满足表达式则反复执行循环体语句直到不满足表达式为止。 while语句运行图示 例：求解1~100的和 12345678const int n=100; //用常变量利于修改程序int i=1, sum=0; //循环初始条件while(i &lt;= n) //循环入口条件&#123; sum+=;//循环体 ++i;//循环修正条件&#125;cout &lt;&lt; &quot;sum=&quot; &lt;&lt; sum &lt;&lt; endl; 解析： 代码结束后i的值为101。 sum=0不能遗忘，否则会出现随机数。 做题看结果通常看头尾。 若循环体中有多个语句一定要用&#123;&#125;。 部分题目中会将循环修正条件放入循环入口条件中，即将循环体中的i++放入while(i++&lt;=n)中，但一般不推荐这样写。 2. do-while语句12do 循环体语句while(表达式); 解释：先做一次循环体语句，若表达式满足则继续循环，直到表达式不满足终止循环；若表达式不满足则不执行循环。 注：do-while语句与while语句的区别 do-while语句至少执行一次循环体后再判断循环条件是否满足。 while语句先判断条件，然后才执行循环体，可能一次都不执行。 例：求解1~100的和 123456789const int n=100;//用常变量利于修改程序int i=1, sum=O;//循环初始条件do&#123; sum+=i;//循环体 i++;//循环修正条件&#125;while(i&lt;=n);//循环入口条件cout &lt;&lt; &quot;sum=&quot; &lt;&lt; sum &lt;&lt; endl; 3. for语句12for (表达式1; 表达式2; 表达式3) 循环体语句; 解释：先执行式1，然后判断式2，真则执行循环体，后执行式3，接着重复判断式2，直到2为假结束整个循环。 注： 相对于while，式1相当于初始条件；式2相当于维持条件；式3相当于修正条件。 for语句中只有式2是判定条件。 for语句中三个表达式都可以为空，但是分号**;**一定要有。 省去1可以将初始条件放在for之前，省去3可以将修正条件放在循环体中，而省去2则表达式2的值将默认为true，必须用其他方法结束循环。 例：求解1~100的和 12345const int n=100; //用常变量利于修改程序int i, sum=O;for(i=1;i&lt;=n;++i) sum += i;cout &lt;&lt; sum &lt;&lt; endl; 4. 三种循环的选择与注意​ A．三种循环语句没有本质区别，可以互相代替。 ​ B．当循环起点和终点值直接确定，推荐使用for语句。 ​ C．若终止条件不明确（如等待某值输入），推荐while语句。 ​ D．do-while语句最典型场合是必须至少执行一次的循环。如展示菜单。 ​ E．若循环外还要用某变量，则该变量不能在for()和while()语句中定义。 5. 循环语句的嵌套当循环语句中的循环体中又有循环语句时，就构成了嵌套循环。 理解：以时钟的时针和分针为例： 时针每移动一格（大循环），分针就必须跑完一圈（小循环）。 解释：大循环每进行一次，小循环就完整循环一次。 注：大小循环的运行可能相关也可能不相关。 经典案例：打印问题 主要思想：利用循环算法，打印各种有规律的数字或图形。 基本思路：行是大循环，列是小循环。首先断定打印的行数，然后在每一行当中确定打印的列数以及每一列的空格和内容。行数、列数以及打印内容往往存在关联，需要分析清楚并用来控制循环的次数。 算法示例： 打印星号平行四边形 12345678for (int i = 1; i &lt;= 4;++i)&#123; for (int j = 1; j &lt;= i; ++j) cout &lt;&lt; &#x27; &#x27;; for (int j = 1; j &lt;= 7; ++j) cout &lt;&lt; &#x27;*&#x27;; cout &lt;&lt; &#x27;\\n&#x27;;&#125; 解析： 首先确定行数为4行。 每行包括前面空格后面*号。 空格数量和行号相等。 *号的数量是固定为7个。 打印完每一行之后要换行。 6. 循环中的控制语句(1) break语句 在循环语句中遇到break，整个循环结束。 如果有多层循环嵌套，则break只结束最近的循环。 例：素数判断 基本思路：i从2到根号n之间进行循环，将每个i用n去除，如果可以整除则直接判断不是素数；如果i的整个循环走完仍不能整除才能判断n是素数。 1234567891011int n, k, i;cout &lt;&lt; &quot;输入整数n:&quot; ;cin &gt;&gt; n;k = sqrt(1.0 * n);for (i = 2; i &lt;= k; ++i) if (n % i == 0) break;if(i &gt; k) cout &lt;&lt; &quot;是素数\\n&quot;;else cout &lt;&lt;&quot;不是素数\\n&quot;; (2) continue语句在循环语句中遇到continue，当轮循环停止，立即开始下一轮循环。 例：输出100以内的偶数。 12345for (i = 1; i &lt;= 100; i++)&#123;if ( i % 2 != 0 ) continue; cout&lt;&lt; i &lt;&lt; endl;&#125; 注：break与continue的区别： ​ break终止整个循环，而continue只是终止一次循环。 2.5 C++常用基本算法1. 穷举法 主要思想：列出问题的所有可能性，按所需条件进行逐一筛选。 要求：在设计算法时，应尽可能减少循环的次数以提高效率。 (1) 素数问题点击跳转 (2) 水仙花数问题问题说明：如果一个三位数等于其各位数字的立方和，则该数为水仙花数。 问题思路：将所有的三位数用条件进行验证即可 代码： 123456789int i, a, b, c; //a,b,c分别为百位、十位、个位for(i=100; i&lt;=999; i++)&#123; a = i/100; b = (i-a*100)/10; c = i - a*100 - b*10; if(i==a*a*a+b*b*b+c*c*c) cout &lt;&lt; i &lt;&lt; &#x27;\\t&#x27;&#125; (3) 完全数问题问题说明：如果一个数等于其所有因子（自身除外）的和，则该数为完全数。 如：6=1+2+3，28=1+2+4+7+14 问题思路：遍历一个数的所有因子，并将其求和之后判断与自己是否相等即可。 问题要点：如何遍历一个数的所有因子？ A.单个数的判断： 123456789int i, n, s=0; //注意s必须初始化为0cin &gt;&gt; n;for(i=1; i&lt;=n/2; i++) if(n%i==0) s += i;if(s==n) cout &lt;&lt; &quot;该数是完全数\\n&quot;;else cout &lt;&lt; &quot;该数不是完全数\\n&quot;; B.遍历指定区间的完全数：（以1000以内为例） 未优化代码：正确但运算次数大，判断需要进行n/2次循环。 12345678910int i, n, s;for(i=1; n&lt;=1000; n++)&#123; s = 0; //注意s必须在此处初始化，对每一个n，s都应该重置为0开始 for(i=1; i&lt;=n/2; i++) if(n%i==0) s += i; if(s==n) cout &lt;&lt; n &lt;&lt; &quot;\\t&quot;;&#125; 代码优化：当区间过大的时候，将其从2到根号n进行循环，每次求和的时候同时加上成对因子，但如果有重复的因子需去除。 123456789101112int i, n, k, s=1; //因子必定有1，将s初始化为1减少一次循环cin &gt;&gt; n;k = sqrt(n);for(i=2; n&lt;=k; i++) if(n%i==0) s += i + n/i; if(k*k == n) s -= k; //关键！！k为平方数时会出现一个重复因子i = n/i故要减一次 if(s==n) cout &lt;&lt; &quot;该数是完全数\\n&quot;; else cout &lt;&lt; &quot;该数不是完全数\\n&quot;; (4) 简单推理问题例：某同学做了好事但不留名。校长问了4个人:A说不是我，B说是C，C说是D，D说C胡说。已知4人中有3人说的是真话，请问做好事的是谁? 问题思路：遍历所有可能做好事的人，统计说真话的人是否为3个即可。 问题要点：如何用程序来计算和统计本问题的真假？ 123456char man;for(man = &#x27;A&#x27;; man &lt;=&#x27;D&#x27;; man++)&#123;if((man!=&#x27;A&#x27;)+(man==&#x27;C&#x27;) +(man==&#x27;D&#x27;)+(man!=&#x27;D&#x27;)== 3 ) //3个bool=1cout&lt;&lt;&quot;好人就是&quot;&lt;&lt;man&lt;&lt;endl;&#125; 2. 递推法 主要思想：按照某种规律，对同一个变量不断更改其值（递推），从而求解问题。 基本思路：确定递推项 → 确定递推起点 → 分析递推规律 → 判断终止条件 (1) 斐波那契数列 数列背景︰ 数列1，1，2，3，5，8…为以意大利数学家费波纳切命名的数列。定义小兔子t时间后长为大兔子，大兔子会繁殖且繁殖周期为t。则1对小兔子t时间后长大为1对大兔子。t时间后变成2对（1对小1对大）。t时间后变成3对（2对大1对小）。t时间后变为5对（3对大2对小）等等。 问题背景：现用循环求出该数列的前n项。 问题思路：不可能定义n个变量逐个保存，只能用少数的变量反复使用来达到该效果。 问题要点：如何找出递推的变化规律?务必通过该问题，掌握递推算法的核心思想。 斐波那契数列递推思路： 确定递推项：三项f1，f2，f3 递推起点：f1=f2=1 递推规律：f3=f1+f2，然后旧f2推出新f1，旧f3推出新f2，再重复前述过程 例：(右上到左下替换) f1 f2 f3 1 1 2 1 2 3 2 3 5 终止条件：指定次数（本例为n-2次） 解法一： 12345678910int f1=1, f2=1, f3, i; //只定义3个变量cout &lt;&lt; f1 &lt;&lt; &#x27;\\t&#x27; &lt;&lt; f2 &lt;&lt; &#x27;\\t&#x27;; //打印开始for(i=3; i&lt;=20; i++) //打印前20个值&#123; f3 = f1 + f2; //打印结果 cout&lt;&lt;f3&lt;&lt;&#x27;\\t&#x27;; if(i%5==0) //每5个数换一行 cout &lt;&lt; endl; f1 = f2; //变量递推，准备下一次的值 f2 = f3; //变量递推，顺序问题很重要 解法二： ​ 递推规律：新f1=旧f1+旧f2；新f2=新f1+旧f2 旧 f1 旧 f2 新 f1 新 f2 1 1 2 3 1234567int f1=1, f2=1, i;for(i=1; i&lt;=10; i++)&#123; cout &lt;&lt; f1 &lt;&lt; &#x27;\\t&#x27; &lt;&lt; f2 &lt;&lt; &#x27;\\t&#x27;; f1 = f1 + f2; f2 = f1 + f2;&#125; //请对照递推规律自行理解体会该思路 (2) sin(x)的求解问题已知 sin(x) &#x3D; x - x3 &#x2F; 3! + x5 &#x2F; 5! - x7 &#x2F; 7! + …..利用该公式求解sin(x)的值，精度为10-6。 问题思路：观察每一项的分子、分母和符号位的值。当前项的符号位乘 -1 就是下一项的符号位；当前项的分子乘 x2 就是下一项的分子;当前项的分母乘以(2*n+1)*(2*n)，即为下一项的分母，n为当前的项数。 精度为10-6可用来控制循环的终止，如果计算的通项绝对值小于该值，则循环终止。 示例：求 sin 3 &#x3D; ? 123456789double x = 3, s = 0, t = x;int n = 1;while(fabs(t) &gt;= 1e-6)&#123; s += t; t = -t * x * x / (2 * n + 1) / (2 * n); ++n;&#125;cout &lt;&lt; s &lt;&lt; endl; (3) 二分法求解方程问题问题说明：假设f(x)在区间[a,b]中单调递增，且肯定有根，求解该根的值。 问题思路：取区间的一半判断其函数值，如果为负，则收缩区间为中点到右区间，反之为左区间到中点。重复上述过程，直到中点值为0或满足精度要求即可。 问题要点：反复递推区间的左右值即可，当求出的中点值小于某区间即可终止。 示例：二分法求x2-2&#x3D;0 12345678910double a=0,b=2,c=(a+b)/2; //递推起点double t = c*c-2;while(fabs(t)&gt;=1e-6)//终止条件 不能写t!=0，因计算机中t实际不能达到精确的0&#123; if(t&gt;0) b=c; //递推过程1 else a=c; //递推过程1 c=(a+b)/2; //递推过程2 t = c*c-2;&#125;cout &lt;&lt; c &lt;&lt; endl; (4) 整数分解问题问题说明：输入任意正整数，判断其位数、计算各位数字之和、求解其倒序数、判断是否为回文数等问题。 问题思路：从个位数开始依次提取，其方法是对10求余，然后将该数除以10，并重复上述步骤，直到该数为0则结束。 问题要点：上述思路仅限分解，如果是组装则逆向进行。 示例：求解12345的倒序数。 1234567int n = 12345,m = 0;do&#123; m = m * 10 + n % 10; //n%10求解末位数，n/=10将末位向左移一位从而循环 n /= 10;&#125; while (n &gt; 0);cout &lt;&lt; m &lt;&lt; &#x27;\\n&#x27;; 3. 模拟法基本思想：根据题目给出的规则，对题目要求的相关过程进行模拟。模拟法对于步骤比较繁杂的问题比较合适。 报数问题题目：小张按1～20报数，小李按1～30报数，若两人同时开始，并以同样速度报数，当两人都报了1000个数时，报相同数字的次数有多少? 思路：进行1000次循环，每一次小张和小李各报一次数（注意调整下一次的值），统计相等次数即可。 123456789int round, zhang = 0, wang = 0, count = 0;for (round = 1; round &lt;= 1000; ++round)&#123; ++zhang; ++wang; if(zhang == wang) ++count; if(zhang == 20) zhang = 0; if(wang == 30) wang = 0;&#125;cout &lt;&lt; count;","categories":[{"name":"科技·编程","slug":"科技·编程","permalink":"https://extremeer.github.io/categories/%E7%A7%91%E6%8A%80%C2%B7%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://extremeer.github.io/tags/C/"},{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"}],"author":"Marz"},{"title":"「See the Color 看见未来的颜色」玉溪师院附中 2022年 高考加油视频","slug":"see_the_color","date":"2022-04-16T16:00:00.000Z","updated":"2022-05-18T15:41:45.983Z","comments":true,"path":"media/c553df47/","link":"","permalink":"https://extremeer.github.io/media/c553df47/","excerpt":"","text":"展翅飞翔的时刻，请下定决心不再回头；心之所向的目标，是那湛蓝辽阔的青空。原视频存储于Bilibili. I can feel splendid youth for zest.You can see vivid color of future. 2022-04-17","categories":[{"name":"传媒·教育","slug":"传媒·教育","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E8%82%B2/"}],"tags":[{"name":"视频","slug":"视频","permalink":"https://extremeer.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"高中","slug":"高中","permalink":"https://extremeer.github.io/tags/%E9%AB%98%E4%B8%AD/"},{"name":"高考","slug":"高考","permalink":"https://extremeer.github.io/tags/%E9%AB%98%E8%80%83/"},{"name":"特效","slug":"特效","permalink":"https://extremeer.github.io/tags/%E7%89%B9%E6%95%88/"}],"author":"Extremeer"},{"title":"「C++极简教程」第一章 C++基本概念","slug":"cpp_easy_section_1","date":"2022-03-31T16:00:00.000Z","updated":"2022-05-11T13:41:31.951Z","comments":true,"path":"tech/1361e0e9/","link":"","permalink":"https://extremeer.github.io/tech/1361e0e9/","excerpt":"","text":"本系列为C++的入门学习者服务，旨在于为此前毫无C++基础且未来要学习C++的学习者简单介绍关于C++语言最基础的部分知识，如果已入门C++，则不需要阅读本系列。 1.1 C++语言概述与框架1. 典型实例1234567891011#include &lt;iostream＞ //头文件包含指令 | “//”：注释符号 | “#”：编译指令using namespace std; //指定名字空间 | int：对应main函数返回整数int main() //main函数 | 程序中有且仅有一个main函数&#123;int i, j; //说明变量cout &lt;&lt; &quot;输入i和j: &quot;; //输出提示信息cin &gt;&gt; i &gt;&gt; j; //从键盘上输入变量值 | cin &gt;&gt;：输入cout &lt;&lt; &quot;sum: &quot; &lt;&lt; i + j &lt;&lt; endl; //输出变量值 | cout &lt;&lt;：输出 | endl：输出换行return 0; //返回结果&#125;//分号“;”：“语句”结束（#include是指令，int main()也是指令，不用分号） 2. C++程序的组成部分常见的C++程序的默认框架 1234567#include &lt;iostream＞using namespace std;int main()&#123; //语句在此 xxxxxx;return 0;&#125; 3. C++中的注释注释的文字不会在程序运行的时候被执行，能起到解释代码的作用。 ① 单行注释：以//开始，换行后结束。 1int a; //我是注释我是注释我是注释 ② 多行注释：以 /*开始，以*/结束。 1234int a;/*我们是注释我们是注释我们是注释我们是注释我们是注释我们是注释*/int b; 4. C++的字符集.符号.关键字字符集：只允许直接使用英文字符和阿拉伯数字。（其他字符不推荐使用） 标点符号：必须使用西文符号。 关键字：具有特定含义的英文单词，如int，不能另作他用。 1.2 C++中的数据类型C++程序中的数据具备三种属性：数据类型，名字，值。 1. 数据类型的意义C++为强类型语言，所有变量应“先定义后使用”，数据类型定后无法修改。 2. C++中的基本数据类型 数据类型 代码表示 整数型 int 字符型 char 实数型 float（单浮点数） double（双浮点数） 逻辑型 bool 注：以上仅包含基本数据类型。 (1) 整数型 intA. 定义：存放整数数据，存储数据长度和计算机字长有关系。 若定义1字节&#x3D;8位二进制数（即位数&#x3D;字节*8），int长度为4字节，容纳的范围就为-231~231-1。若数据超出范围，则会溢出。注：有关于溢出以及字长问题，请参考：计算机补码相关知识 B. 修饰：整型数据经修饰后可以有许多形式。 int前可以用short，long，signed，unsigned修饰 类型 长度 范围 (signed) short (int) 2 -215~(215-1) unsigned short (int) 2 0~(216-1) (signed) long (int) 4 -231~(231-1) unsigned long (int) 4 0~(232-1) (signed) (int) 4 -231~(231-1) unsigned (int) 4 0~(232-1) signed int表述整数格式为补码，即将模劈开一半左边表示负数。 unsigned int表示整数格式为纯数值类型（必然是正数），即将模全用于正数。 注：以上数据可能仅在32位编译器中生效，随编译环境不同长度也可能不同。 (2) 字符型 char字符类型保存单个字符，存储的为该字符的ASCII码数值，长度为一个字节。 字符类型本质上也属于整数，也可以用signed和unsigned修饰。 注：关于ASCII码：128个常用字符指定数值编码，范围0～127。 A. ASCII码前32位为控制字符，有特定功能但无法直接输入和表示。 B. 需要记住的ASCII码数值：字符0为48，字符A为65，字符a为97。（先大写后小写：小写比大写多32） (3) 实数型 float double单精度float与双精度double都用来存放实数，但精度不同。 类型 长度 范围 精度 float 4 约-1038~1038 6~7 double 8 约-10308~10308 15~16 (4) 逻辑类型 bool取值只能为true或false。 存储字节数通常为1个字节。 bool型在运算中可以和整型相互转化：false=0，true=1。 1.3 C++中的变量和常量1. C++中的变量 变量必须先定义后使用且无法更改。 变量必须使用标识符进行标识，即变量名。 定义变量实例：int a, b; 定义变量的同时赋值，即为初始化，可以避免随机值。如int a = 0。 初始化语句 含义 int a; 默认初始化（随机） int a &#x3D; 3; 赋值初始化 int a(3); 构造初始化 int a{3}; 列表初始化 int a &#x3D; {3}; 列表初始化的赋值写法 2. C++中的字面常量字面常量指程序中直接给出的量，执行过程中值不变。 (1) 整数常量 整数常量 格式 示例 十进制整数 与实际使用的格式一致 38 八进制整数 以0开始的整数为八进制整数 077 十六进制整数 以0X（大小写都可）开始的整数 0x5abc 注：整数后缀 整数后加L(long)或U(unsigned)表示长整数或无符号整数（大小写都可） 84L 0x32LU (2) 实数常量 定点格式与日常书写相同。如：0.23。 指数格式为尾数乘10的次方，“十”用E或e表示，次方必须为整。如：0.3e-2。 实数常量使用的时候应避免不精确问题。 123bool a;a = ( 0.1 + 0.2 == 0.3 ); //0.1 + 0.2 实数相加并不是准确 = 0.3cout &lt;&lt; a; //结果为0（false） (3) 字符常量用一对单引号引的单个字符，类型是char，在内存中保存的值是字符的ASCII码值。如：&#39;a&#39; &#39;@&#39; 注：转义字符：控制字符无法直接显示和输入，用转义字符间接表示。 常用的转义字符： 转义字符 含义 备注 ‘\\n’ 回车 ‘\\t’ 横向制表 一个制表为8位，输出整齐 ‘\\nnn’ 任意字符8进制（ASCII）转义 如：‘\\101’代表字符A ‘\\xnn’ 任意字符16进制（ASCII）转义 如：‘\\x41’字符字符A（x必须小写） 例：C++中的三个“零”： 形式 类型 长度 值 0 整数 4 0 ‘0’ 字符 1 48 ‘\\0’ 字符 1 0 (4) 字符串常量用一对双引号引起来的若干字符（可以为空）。如：&quot;123&quot; &quot;&quot; 在内存中存放字符串的时候，在最后存放了一个隐藏的&#39;\\0&#39;。 如：&quot;a&quot;长度为2，而&#39;a&#39;长度为1。 (5) 常变量用const修饰变量使其无法更改，称之为常变量。 如：const float PI = 3.14159; 常变量必须且只能在定义的时候初始化，且之后无法更改。 1.4 C++中的运算符和表达式要点：掌握运算符功能，规定，优先级，结合性，分类。 1. 优先级和结合性 优先级：指不同运算符在运算中的优先关系。（从小到大越小越优先） 结合性：决定优先级相等的或相同运算符组合在同一运算式时的运算次序。 2. 基本运算符(1) 算术运算符指在计算机中参与数学运算的各类运算符，具体如下表 优先级 运算符 名称 类型 3 + 正 单目 3 - 负 单目 5 * 乘1 双目 5 &#x2F; 除2 双目 5 % 求余3 双目 6 + 加 双目 6 - 减 双目 注：算术运算符的语法说明 运算表达式中乘号*不能省略。如：v = a*b*c不能写为v = abc。 当两操作数均为整数，*&#x2F;*为整除，结果为整数，且是舍去小数的整数。如：5 / 4 = 1; 1 / 2 = 0。若想让结果不取整，则在操作数部分改为1.0,2.0等。如：1.0 / 2 = 0.5。 %为整数求余，只对整数有效，最后符号与被除数同。如：-7 % 6 = -1。 C++中平方只能通过a*a或特定函数实现，而不是a^2。 (2) 赋值运算符将赋值号 = 右边的值送到左边变量中（由右向左结合） 赋值运算符的优先级很低（16），仅高于throw和逗号,运算符。 变量名代表的单元为左值，表达式的值为右值。即：左值 = 右值。 左值只能是变量名或可寻址表达式，右值形式不限。 如：下列形式都是错误形式：3 = a; a + b = c 注：复合赋值运算符：由双目运算符和位运算符与赋值运算符组合。(16级) +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &lt;&lt;&#x3D; &gt;&gt;&#x3D; &amp;&#x3D; &#x3D; ^&#x3D; 运算规则： 变量_复合赋值运算符_表达式 等同于 变量 &#x3D; 变量_运算符_表达式 如：x += 5 等同于 x = x + 5; x *= 5 + 3 等同于 x = x * ( 5 + 3 ) (3) 自增、自减运算符 – ++ 意义：变量当前值加1或减1，再赋给该变量 要求：操作数只能是左值，是单目运算符。 注：前置与后置运算 前置++i：先增减后引用，即先对变量增减，用新的值参与运算。 结合性：由右向左结合。 优先级：3（与普通单目运算符相同） 前置运算表达式是左值，如：++a结果就是经过变换后的a本身。 例：a &#x3D; 1; ++a &#x3D; 3; a &#x3D; ? a &#x3D; 1; ++a &#x3D; 2; (则 a&#x3D;2) a&#x3D;3; 故最终a &#x3D; 3 后置i++：先引用后增减，即先用旧值运算，再对变量自加自减。 结合性：由左往右结合。 优先级：2（高于前置运算） 后值运算表达式是右值，如a++并不是a，而是一个临时量，在参与完运算过程后再执行一次a+1，而后临时量a++被舍弃，故不可寻址。 例：int a &#x3D; 2, b, c; b &#x3D; a++ * 3; c &#x3D; ++a * 2; b &#x3D; 2 * 3 &#x3D; 6 同时 a &#x3D; a + 1 &#x3D; 3 c &#x3D; 4 * 2 &#x3D; 8 (4) 关系运算符 运算符 含义 &gt; 大于 &gt;&#x3D; 大于等于 &lt; 小于 &lt;&#x3D; 小于等于 &#x3D;&#x3D; 等于 !&#x3D; 不等于 运算结果：&lt;bool&gt; true 或 false 优先级： 低于算术运算符，高于赋值运算符。 判断大小的符号高于判断相等的符号。 注：关系运算符不能连续 如：a&gt;b&gt;c会被解释为(a&gt;b==true=1)&gt;c=0 (5) 逻辑运算符 优先级 运算符 名称 类型 语义 3 ！ 逻辑非 单目 真则假，假则真 13 &amp;&amp; 逻辑与 双目 全真则真，一假则假 14 || 逻辑或 双目 一真则真，全假则假 注：逻辑值与数值的转换 逻辑值转数值： 逻辑值 数值 true 1 false 0 数值转逻辑值： 数值 逻辑值 非0 true 0 0 例：逻辑运算符判断连续的关系运算符 判断a &gt; b &gt; c写法为a &gt; b &amp;&amp; b &gt; c 注：逻辑表达式的优化和副作用 在求逻辑表达式值的过程中，一旦表达式的值能够确定，就不再进行之后的运算。 例：如下程序 123int a=10, b=20, c=30, d;d = a &lt; b || c++;cout &lt;&lt; &#x27;d&#x27; &lt;&lt; &#x27; &#x27; &lt;&lt; &#x27;c&#x27; &lt;&lt; endl; 求解过程中a&lt;b为真，**||两侧只要有一侧是真结果便确定，所以右边的c++将不会被计算**，c仍然为30，结果d = true，故d=1。 (6) 位运算符 优先级 运算符 名称 类型 3 ~ 按位取反 单目 7 &lt;&lt; 左移 双目 7 &gt;&gt; 右移 双目 10 &amp; 按位与 双目 11 ^ 按位异或 双目 12 | 按位或 双目 常见的位运算符算法： 按位取反 &#x3D; - n - 1 左移 &#x3D; a * 2n 右移 &#x3D; a &#x2F; 2n (7) 逗号运算符用逗号运算符连接起来的表达式称为逗号表达式（优先级最低，为18） 格式：表达式1，表达式2，……，表达式n 作用：逗号表达式中由左向右每一个表达式都会被运算，整个表达式的值为最后一个表达式的值，常用来连接多个表达式。 例： 12int a, x;a = (x = 3, x += 6, 5 + 6) 最后结果 a = 11 x = 9 (8) sizeof() 运算符常用于计算一个操作数类型或一个变量的字节数。 例：在32位编译器中 123sizeof(int) // 4sizeof(float) // 4sizeof(double) // 8 3. 运算符优先级简单总结目前为止学到的运算符： 单目 &gt; 算术 &gt; 关系 &gt; 逻辑 &gt; 赋值 所有单目符号无论类别，优先级都同，结合性都由右向左（后置符号除外） 1.5 C++中的类型转换1. 自动类型转换当二元运算符两边的操作数类型不同但属于类型相容时，系统将精度低的操作数变换到与另一操作数精度相同，而后再进行运算。 常见的类型转换 char,short→int→long→float→double signed→unsigned 字符自动变换成整型（转为ASCII码） 2. 赋值类型转换当赋值号左值右值类型不同但类型相容的时候，将将右值转换为左值类型。 类型 方法 小数→整数 直接取整舍去小数 整数→小数 小数位补.0 整数高→整数低 舍去高字节 整数低→整数高 补充符号位（unsigned除外） 例：char c &#x3D; 250; int a &#x3D; c; 求a&#x3D;? char c = 250 中，因为char长度只有一个字节，即8位，存储范围为-128~127，250作为一个int（4个字节32位）实际上已经溢出： 250二进制为00000000 00000000 00000000 11111010 如果只存储一个字节（8位）则舍去高字节变成： 11111010 则c变成了-6的二进制 再赋值给a（int4字节32位）的时候，补充了符号位 11111111 11111111 11111111 11111010则a被赋值成-6 3. 强制类型转换将表达式强制转换为指定的类型（type）参与运算（临时值），但本身的值不变 格式：(type)表达式 或 type(表达式) 1.6 输入输出的详细问题1. cin和数据的输入cin &gt;&gt; a &gt;&gt; b; (1) 如果需要同时输入多个整数或实数，输入需要进行分隔，默认的分隔符号为空格、回车、TAB。 输入整型int时： 12int a, b, c;cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; 输入时应输入1 2 3，才能分别将1 2 3赋值到a b c，如果输入123则只能将a赋值为123。 (2) 同时输入多个字符则不需要分隔。 输入字符char时： 12char a, b, c;cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; 输入时输入123或1 2 3都可以分别输入成功。 (3) 如果输入过程中如果需要输入空白字符在内的任意字符，则需要使用cin.get()函数。 c = cin.get() cin.get(c) 例： 12345char a, b, c;cin.get(a);b = cin.get()cin.get(c)cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; 输入时如果输入1 2 3，则a被给1，b被给空格，c被给2，剩下的空格与3丢弃。 2. 输入输出格式控制&lt;iomanip&gt;的两个常用函数 (1) setw(int n)函数 控制输出内容的最短宽度为n位，用来帮助对齐。 例：(自己实践，可以打出完美的制表) 12for (int i = 1; i &lt;= 100; ++i)cout &lt;&lt; i &lt;&lt; &#x27;/t&#x27; (1) setprecision(int n)函数 用来控制输出内容的有效数字或小数点的有效位数。 A. 当输出模式为定点小数（fixed）时，控制小数位数。（四舍五入） 例： 1cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; 100.0 / 7 &lt;&lt; endl; 输出结果为14.29。 B. 当输出模式为默认时，控制有效数字。 例： 1cout &lt;&lt; setprecision(2) &lt;&lt; 100.0 / 7 &lt;&lt; endl; 输出结果为14。 当输出模式为科学技术（scientific）时，控制实数部分小数位数。 例： 1cout &lt;&lt; scientific &lt;&lt; setprecision(2) &lt;&lt; 100.0 / 7 &lt;&lt; endl; 输出结果为1.43e+01。（控制实数1.43的小数位数）","categories":[{"name":"科技·编程","slug":"科技·编程","permalink":"https://extremeer.github.io/categories/%E7%A7%91%E6%8A%80%C2%B7%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://extremeer.github.io/tags/C/"},{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"}],"author":"Marz"},{"title":"「315前后的P2P下载器」2022年3·15特辑","slug":"p2p_downloader","date":"2022-03-16T16:00:00.000Z","updated":"2022-05-18T15:41:21.344Z","comments":true,"path":"media/cc1bfa19/","link":"","permalink":"https://extremeer.github.io/media/cc1bfa19/","excerpt":"","text":"P2P下载器这个无恶不作的东西终于在2022年的315被官方曝光，曾有无数人的设备被这个崽子拖累，可真是让人深恶痛绝。原视频存储于Bilibili. 而今下载站暂时迎来了安宁，但同时还需要我们的努力不让互联网的这段记忆消失，从而使网络环境能真正的安宁永驻。 2022-03-17","categories":[{"name":"传媒·社会","slug":"传媒·社会","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E7%A4%BE%E4%BC%9A/"}],"tags":[{"name":"社会","slug":"社会","permalink":"https://extremeer.github.io/tags/%E7%A4%BE%E4%BC%9A/"},{"name":"视频","slug":"视频","permalink":"https://extremeer.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"科技","slug":"科技","permalink":"https://extremeer.github.io/tags/%E7%A7%91%E6%8A%80/"}],"author":"Extremeer"},{"title":"「计算机科普」补码 计算机系统数值表示","slug":"twos_complement","date":"2022-02-28T16:00:00.000Z","updated":"2022-05-07T10:26:34.760Z","comments":true,"path":"tech/4c4d67c4/","link":"","permalink":"https://extremeer.github.io/tech/4c4d67c4/","excerpt":"","text":"1. 真值与机器数真值是原来的数，机器数为相应存储在电脑内的二进制数。 2. 模的概念一个计量系统的计数范围。 生活实例：时钟的模为12，计量范围是0~11，11过后又回到 0。n位计算机数的模为2n，计量范围是0~(2n-1)。 运用：n&#x3D;4，模为24&#x3D;16，计量范围是0~15（二进制表示0000~1111）。如当前数15的二进制值为1111，则再加1，计数值就变为了0000，真值就变成了0，而在最高位上溢出了一个1。 3. 补码（以8位二进制为例）本质：用大的正数来表示小的负数，化减为加。 生活实例：在时钟内：从8点调到5点，有8-3&#x3D;8+9，则-3&#x3D;9（绝对值相加等于模） (1) 原理8位二进制数原本计数的范围是0~255，因需要表示负数使用补码，将128~255用来表示负数（-1~-128）其二进制首位为1，0~127不变仍表示正数（0~127）其二进制首位为0。 若最终结果超出范围，可增加位数避免溢出。 例：若想记录数128，则需要将8位二进制数提升至16位，扩大计数范围避免溢出。 (2) 补码的二进制表示如果n是正数，补码就是其二进制，如果n是负数，补码则是n+256的二进制。 「+73」补码 &#x3D; 01001001「-73」补码 &#x3D; 10000000 - 01001001&#x3D;10110111（183的二进制） (3) 补码的运算① 真值到补码： 当n是负数，可以通过其相反数各位取反加1来快速求出补码。 例：设n&#x3D;8，求-36补码。36的二进制&#x3D;00100100各位取反得11011011末位加1结果为11011100即为补码 ② 补码到真值： 如果补码最高位是1（即真值128以上，代表负数），将各位取反加一，转换为十进制再加负号。 如果补码最高位是0（即真值127以下，代表正数），直接转换为十进制即可。 例：假设n的八位补码是10101010，求n真值。10101010取反加一&#x3D;0101011001010110的十进制&#x3D;86添加负号n&#x3D;-86","categories":[{"name":"科技·编程","slug":"科技·编程","permalink":"https://extremeer.github.io/categories/%E7%A7%91%E6%8A%80%C2%B7%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"原理","slug":"原理","permalink":"https://extremeer.github.io/tags/%E5%8E%9F%E7%90%86/"}],"author":"Marz"},{"title":"「ASIDE AGES 独白岁月」玉溪师院附中 2021届 1 班 毕业视频","slug":"aside_ages","date":"2021-08-07T16:00:00.000Z","updated":"2022-05-18T15:38:39.589Z","comments":true,"path":"media/8943ed79/","link":"","permalink":"https://extremeer.github.io/media/8943ed79/","excerpt":"","text":"一场说走就走的旅行，我们终将启程，向稚嫩的自己告别。原视频存储于Bilibili. 监制：伯乐马教育考试研究院 出品：极振科技传媒工作室 2021-08-08","categories":[{"name":"传媒·教育","slug":"传媒·教育","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E8%82%B2/"}],"tags":[{"name":"视频","slug":"视频","permalink":"https://extremeer.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"毕业","slug":"毕业","permalink":"https://extremeer.github.io/tags/%E6%AF%95%E4%B8%9A/"},{"name":"高中","slug":"高中","permalink":"https://extremeer.github.io/tags/%E9%AB%98%E4%B8%AD/"}],"author":"Extremeer"},{"title":"「抗疫日记」疫情专题片","slug":"anti_virus_diary","date":"2020-03-07T16:00:00.000Z","updated":"2022-05-18T15:38:18.412Z","comments":true,"path":"media/1f2a1fce/","link":"","permalink":"https://extremeer.github.io/media/1f2a1fce/","excerpt":"","text":"抗击疫情，我们在行动。为武汉加油，为中国加油，为世界加油。原视频存储于Bilibili. 部分素材来自：人民日报 中国日报央视新闻 丁香园世界卫生组织 武汉市卫健委音乐来自：the Millenium Dawn, a mod of Hearts of Iron IV.Mod及音乐情感背景与本视频和工作室引用无关 2020-03-08","categories":[{"name":"传媒·社会","slug":"传媒·社会","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E7%A4%BE%E4%BC%9A/"}],"tags":[{"name":"疫情","slug":"疫情","permalink":"https://extremeer.github.io/tags/%E7%96%AB%E6%83%85/"},{"name":"社会","slug":"社会","permalink":"https://extremeer.github.io/tags/%E7%A4%BE%E4%BC%9A/"},{"name":"视频","slug":"视频","permalink":"https://extremeer.github.io/tags/%E8%A7%86%E9%A2%91/"}],"author":"Extremeer"},{"title":"「Memorise 追忆」玉溪第八中学 2021届 广告","slug":"memorise_8_school","date":"2018-03-30T16:00:00.000Z","updated":"2022-05-18T15:41:13.778Z","comments":true,"path":"media/e9541b8f/","link":"","permalink":"https://extremeer.github.io/media/e9541b8f/","excerpt":"","text":"谨以此片，纪念初中生活。原视频存储于Bilibili. 合作：黑尧文化社 出品：极振科技传媒工作室 2018-03-31","categories":[{"name":"传媒·教育","slug":"传媒·教育","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E8%82%B2/"}],"tags":[{"name":"视频","slug":"视频","permalink":"https://extremeer.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"初中","slug":"初中","permalink":"https://extremeer.github.io/tags/%E5%88%9D%E4%B8%AD/"}],"author":"Extremeer"}],"categories":[{"name":"传媒·数码","slug":"传媒·数码","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%B0%E7%A0%81/"},{"name":"传媒·教程","slug":"传媒·教程","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E7%A8%8B/"},{"name":"科技·实用","slug":"科技·实用","permalink":"https://extremeer.github.io/categories/%E7%A7%91%E6%8A%80%C2%B7%E5%AE%9E%E7%94%A8/"},{"name":"科技·编程","slug":"科技·编程","permalink":"https://extremeer.github.io/categories/%E7%A7%91%E6%8A%80%C2%B7%E7%BC%96%E7%A8%8B/"},{"name":"传媒·教育","slug":"传媒·教育","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E6%95%99%E8%82%B2/"},{"name":"传媒·社会","slug":"传媒·社会","permalink":"https://extremeer.github.io/categories/%E4%BC%A0%E5%AA%92%C2%B7%E7%A4%BE%E4%BC%9A/"}],"tags":[{"name":"视频","slug":"视频","permalink":"https://extremeer.github.io/tags/%E8%A7%86%E9%A2%91/"},{"name":"数码","slug":"数码","permalink":"https://extremeer.github.io/tags/%E6%95%B0%E7%A0%81/"},{"name":"历史","slug":"历史","permalink":"https://extremeer.github.io/tags/%E5%8E%86%E5%8F%B2/"},{"name":"教程","slug":"教程","permalink":"https://extremeer.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"达芬奇","slug":"达芬奇","permalink":"https://extremeer.github.io/tags/%E8%BE%BE%E8%8A%AC%E5%A5%87/"},{"name":"Davinci","slug":"Davinci","permalink":"https://extremeer.github.io/tags/Davinci/"},{"name":"剪辑","slug":"剪辑","permalink":"https://extremeer.github.io/tags/%E5%89%AA%E8%BE%91/"},{"name":"手机","slug":"手机","permalink":"https://extremeer.github.io/tags/%E6%89%8B%E6%9C%BA/"},{"name":"协同","slug":"协同","permalink":"https://extremeer.github.io/tags/%E5%8D%8F%E5%90%8C/"},{"name":"C++","slug":"C","permalink":"https://extremeer.github.io/tags/C/"},{"name":"原理","slug":"原理","permalink":"https://extremeer.github.io/tags/%E5%8E%9F%E7%90%86/"},{"name":"高中","slug":"高中","permalink":"https://extremeer.github.io/tags/%E9%AB%98%E4%B8%AD/"},{"name":"高考","slug":"高考","permalink":"https://extremeer.github.io/tags/%E9%AB%98%E8%80%83/"},{"name":"特效","slug":"特效","permalink":"https://extremeer.github.io/tags/%E7%89%B9%E6%95%88/"},{"name":"社会","slug":"社会","permalink":"https://extremeer.github.io/tags/%E7%A4%BE%E4%BC%9A/"},{"name":"科技","slug":"科技","permalink":"https://extremeer.github.io/tags/%E7%A7%91%E6%8A%80/"},{"name":"毕业","slug":"毕业","permalink":"https://extremeer.github.io/tags/%E6%AF%95%E4%B8%9A/"},{"name":"疫情","slug":"疫情","permalink":"https://extremeer.github.io/tags/%E7%96%AB%E6%83%85/"},{"name":"初中","slug":"初中","permalink":"https://extremeer.github.io/tags/%E5%88%9D%E4%B8%AD/"}]}